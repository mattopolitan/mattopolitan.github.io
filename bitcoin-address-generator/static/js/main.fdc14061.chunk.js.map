{"version":3,"sources":["js/components/FormHDSegwit.js","js/validators/rules/seed_validate.js","js/validators/rules/path_validate.js","js/components/FormMultiSig.js","js/validators/rules/pubkey_validate.js","js/components/AddressInfo.js","App.js","serviceWorker.js","index.js","js/utils/utils.js"],"names":["WORD_LIST","ReeValidate","Validator","extend","validate","value","compare","validationType","bip39","seed_validate","params","message","match","path_validate","FormHDSegwit","props","validator","seed","path","state","formData","word","errors","generateRandomSeed","bind","onChange","handleUpdateWord","validateAndSubmit","_formData","this","_errors","items","setState","e","name","target","remove","then","console","log","_word","document","getElementById","innerHTML","preventDefault","validateAll","submit","length","handleFormData","disabled","id","className","onSubmit","Button","theme","themeType","type","DoneSVGIcon","onClick","Select","options","label","required","TextArea","lineDirection","rows","placeholder","error","has","FormMessage","React","Component","NUMBER_ITEMS","i","pubkey_validate","FormMultiSig","pubkeys","n","handleUpdateN","handleUpdatePubkeys","_n","_pubkeys","slice","AddressInfo","info","form","qrcode","detail","mnemonic","HDSegwit","multiSigAddress","pubAddress","size","text","el","style","WebkitTransition","transition","opacity","setTimeout","ContentCopySVGIcon","map","index","window","print","App","masterPriKey","view","changeView","changeForm","a","getRootFromMnemonic","root","getHDSegwitFromRootWithPath","getPriKeyFromRoot","getMultiSigAddress","result","_view","_form","src","alt","Switch","defaultChecked","href","data-hotkey","aria-label","data-ga-click","height","viewBox","version","width","aria-hidden","fill-rule","d","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","_mnemonic","hdkey","_root","privateKey","toString","_path","publicKey","derive","_publicKey","pubKey","bitcoin","p2wpkh","pubkey","address","hex","Buffer","from","p2sh","redeem","p2ms","m","parseInt"],"mappings":"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","file":"static/js/main.fdc14061.chunk.js","sourcesContent":["import React from 'react';\nimport {FormMessage, TextArea, Button, DoneSVGIcon, Select} from 'react-md';\nimport ReeValidate from 'ree-validate';\nimport seed_validate from \"../validators/rules/seed_validate\";\nimport path_validate from \"../validators/rules/path_validate\";\nimport * as bip39 from 'bip39';\n\nconst WORD_LIST = [12,15,18,21,24];\n\nReeValidate.Validator.extend('seed_validate', {\n    validate: (value, { compare }) => {\n        return seed_validate({value, compare, validationType: ''});\n    },\n    params: ['compare'],\n    message: ''\n});\n\nReeValidate.Validator.extend('path_validate', {\n    validate: (value, { compare }) => {\n        return path_validate({value, compare, validationType: ''});\n    },\n    params: ['compare'],\n    message: ''\n});\n\nclass FormHDSegwit extends React.Component{\n    constructor(props) {\n        super(props)\n\n        this.validator = new ReeValidate.Validator({\n            seed: 'required|seed_validate',\n            path: 'required|path_validate',\n        })\n\n        this.state = {\n            formData: {\n                seed: '',\n                path: '',\n            },\n            word: 24,\n            errors: this.validator.errors,\n        }\n\n        this.generateRandomSeed = this.generateRandomSeed.bind(this)\n        this.onChange = this.onChange.bind(this)\n        this.handleUpdateWord = this.handleUpdateWord.bind(this)\n        this.validateAndSubmit = this.validateAndSubmit.bind(this)\n    }\n\n    generateRandomSeed(){\n        const _formData = {\n            seed: bip39.generateMnemonic(this.state.word * 32 / 3),\n            path: \"m/84'/0'/0'/0/0\"\n        }\n        const _errors = this.validator.errors\n\n        _errors.items = []\n        this.setState({\n            formData: _formData,\n            errors: _errors,\n        })\n    }\n\n    onChange(e) {\n        const name = e.target.name\n        const value = e.target.value\n        const { errors } = this.validator\n\n        // reset errors for url field\n        errors.remove(name)\n\n        // update form data\n        this.setState({ formData: { ...this.state.formData, [name]: value } })\n\n        this.validator.validate(name, value)\n            .then(() => {\n                this.setState({ errors }, console.log(errors))\n            })\n            \n    }\n\n    handleUpdateWord(_word){\n        this.setState({ word: _word })\n    }\n\n    componentDidMount(){\n        // Set Select field default text\n        document.getElementById('custom-select-1-display-value').innerHTML = this.state.word\n    }\n\n    async validateAndSubmit(e) {\n        e.preventDefault()\n\n        const { formData } = this.state\n        const { errors } = this.validator\n\n        const valid = this.validator.validateAll(formData)\n\n        if (valid) {\n            this.submit(formData)\n        } else {\n            this.setState({ errors })\n        }\n    }\n\n    submit(formData) {\n        if(this.state.errors.items.length === 0)\n            this.props.handleFormData(formData)\n    }\n\n    render() {\n        const { errors } = this.state\n        const disabled = errors.items.length !== 0 || this.state.formData.path === '' || this.state.formData.seed === ''\n\n        return (<form id=\"form-hd-segwit\" className={'form'} onSubmit={this.validateAndSubmit}>\n\n            <div className=\"row\">\n                <div className=\"col-xs-4\">\n                    <Button id=\"outlined-button-1\" theme=\"primary\" themeType=\"contained\" type=\"submit\" disabled={disabled}>\n                        {disabled ? '' : <DoneSVGIcon />}\n                        Generate your <br className={'mobile-visible'} />Bitcoin Address!\n                    </Button>\n                </div>\n            </div>\n            <div className=\"row random\">\n                <div className=\"col-xs-4\">\n                    <Button id=\"outlined-button-1\" theme=\"primary\" themeType=\"outline\" onClick={() => this.generateRandomSeed()}>\n                        Generate Seed randomly\n                    </Button>\n                </div>\n                <Select\n                    id=\"custom-select-1\"\n                    name=\"word\"\n                    options={WORD_LIST}\n                    label={`word`}\n                    value={this.state.word}\n                    type=\"word\"\n                    onChange={(word) => this.handleUpdateWord(word)}\n                    required\n                />\n            </div>\n            <div className={\"row\"}>\n                <div className=\"md-grid\">\n                    <TextArea\n                        id=\"seed\"\n                        label=\"Mnemonic Seed\"\n                        type=\"seed\"\n                        lineDirection=\"center\"\n                        className=\"md-cell md-cell--bottom form-control\"\n                        rows={6}\n                        value={this.state.formData.seed}\n                        name=\"seed\"\n                        placeholder=\"Enter your Mnemonic Seed\"\n                        required\n                        error={errors.has('seed')}\n                        onChange={this.onChange}\n                    />\n                    <FormMessage id={`seed-field-error-message`} error>\n                    {\n                        errors.has('seed') ?\n                                \"Invalid Mnemonic Seed!\"\n                            : \"\"\n                    }\n                    </FormMessage>\n\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"md-grid\">\n                    <TextArea\n                        id=\"path\"\n                        label=\"Path\"\n                        type=\"path\"\n                        lineDirection=\"center\"\n                        className=\"md-cell md-cell--bottom form-control\"\n                        rows={3}\n                        name=\"path\"\n                        placeholder=\"m / purpose' / coin_type' / account' / change / address_index\"\n                        required\n                        error={errors.has('path')}\n                        value={this.state.formData.path}\n                        onChange={this.onChange}\n                    />\n                    <FormMessage id={`seed-field-error-message`} error>\n                    {\n                        errors.has('path') ?\n                                \"Invalid Path!\"\n                            : \"\"\n                    }\n                    </FormMessage>\n\n                </div>\n            </div>\n\n\n        </form>)\n    }\n}\n\nexport default FormHDSegwit;","import * as bip39 from 'bip39';\n\nexport default ({ value, compare, validationType }) => {\n    return bip39.validateMnemonic(value)\n}\n","export default ({ value, compare, validationType }) => {\n    if (typeof value === 'undefined') return true\n    return (value.match(/^([mM]{1}\\/84'\\/0'\\/)[0-9]{1}'\\/(0|1)\\/([0-9]{1}|[1-9][0-9]{1,5})$/i)) ? true : false\n}","import React from 'react';\nimport {FormMessage, Select, Button, DoneSVGIcon} from 'react-md';\nimport ReeValidate from 'ree-validate';\nimport pubkey_validate from \"../validators/rules/pubkey_validate\";\n\nimport ChipInput from 'material-ui-chip-input';\n\nlet NUMBER_ITEMS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\nReeValidate.Validator.extend('pubkey_validate', {\n    validate: (value, { compare }) => {\n        return pubkey_validate({value, compare, validationType: ''});\n    },\n    params: ['compare'],\n    message: ''\n});\n\nclass FormMultiSig extends React.Component{\n    constructor(props) {\n        super(props)\n\n        this.validator = new ReeValidate.Validator({\n            pubkeys: 'required|pubkey_validate',\n            n: 'required|integer',\n        })\n\n        this.state = {\n            formData: {\n                pubkeys: [],\n                n: 0,\n            },\n            errors: this.validator.errors,\n        }\n\n        this.handleUpdateN = this.handleUpdateN.bind(this)\n        this.handleUpdatePubkeys = this.handleUpdatePubkeys.bind(this)\n        this.validateAndSubmit = this.validateAndSubmit.bind(this)\n    }\n\n    handleUpdateN(_n){\n        const { errors } = this.validator\n\n        errors.remove('n')\n\n        this.setState({ formData: { ...this.state.formData, ['n']: _n } })\n\n        this.validator.validate('n', _n)\n            .then(() => {\n                this.setState({ errors })\n            })\n    }\n\n    handleUpdatePubkeys(_pubkeys){\n        const { errors } = this.validator\n\n        errors.remove('pubkeys')\n\n        this.setState({ formData: { ...this.state.formData, ['pubkeys']: _pubkeys } })\n\n        this.validator.validate('pubkeys', _pubkeys)\n            .then(() => {\n                this.setState({ errors })\n            })\n\n    }\n\n    async validateAndSubmit(e) {\n        e.preventDefault()\n\n        const { formData } = this.state\n        const { errors } = this.validator\n\n        const valid = this.validator.validateAll(formData)\n\n        if (valid) {\n            this.submit(formData)\n        } else {\n            this.setState({ errors }, console.log(errors))\n        }\n    }\n\n    submit(formData) {\n        if(this.state.errors.items.length === 0)\n            this.props.handleFormData(formData)\n    }\n\n    render() {\n        const { errors } = this.state\n        const disabled = errors.items.length !== 0 || this.state.formData.pubkeys.length === 0 || this.state.formData.n === 0\n\n        return (<form id=\"form-multisig\" className={'form'} onSubmit={this.validateAndSubmit}>\n            <div className=\"row\">\n                <div className=\"col-xs-4\">\n                    <div className=\"col-xs-4\">\n                        <Button id=\"outlined-button-1\" theme=\"primary\" themeType=\"contained\" type=\"submit\" disabled={disabled}>\n                            {disabled ? '' : <DoneSVGIcon />}\n                            Generate your <br className={'mobile-visible'} /> Bitcoin Address!\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            <div className={\"row\"}>\n                Type your Public Keys and press Enter<br />\n                (Support up to 15 keys)<br /><br />\n                <ChipInput\n                    name={'pubkeys'}\n                    onChange={(pubkeys) => this.handleUpdatePubkeys(pubkeys)}\n                    type=\"pubkeys\"\n                />\n                <FormMessage id={`pubkeys-field-error-message`} error>\n                    {\n                        errors.has('pubkeys') ?\n                            \"Invalid Public Key exists! Make sure it's a 33 byte compressed Public Key!\"\n                        : \"\"\n                    }\n                </FormMessage>\n            </div>\n            <div className=\"row\">\n                <Select\n                    id=\"custom-select-1\"\n                    name=\"n\"\n                    options={NUMBER_ITEMS.slice(0,this.state.formData.pubkeys.length)}\n                    onChange={(n) => this.handleUpdateN(n)}\n                    label={`n-of-${this.state.formData.pubkeys.length}`}\n                    value={this.state.formData.n}\n                    type=\"n\"\n                    required\n                    error={errors.has('n')}\n                    disabled={this.state.formData.pubkeys.length === 0}\n                />\n            </div>\n\n        </form>)\n    }\n}\n\nexport default FormMultiSig;","\nexport default ({ value, compare, validationType }) => {\n    if (typeof value === 'undefined') return true\n    if (value.length > 15) return false\n    for(let i = 0; i < value.length; i++){\n        if(!value[i].match(/[a-f0-9]{66}$/i))\n            return false\n    }\n    return true\n}","import React from 'react';\nimport {Button, Switch, ContentCopySVGIcon} from 'react-md';\nimport QRCode from 'qrcode.react';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nclass AddressInfo extends React.Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            info: this.props.info,\n            form: this.props.form\n        }\n    }\n\n    render() {\n        const {path, mnemonic, HDSegwit, multiSigAddress, n, pubkeys} = this.state.info\n        let qrcode, detail\n\n        if(this.state.form === 'hd-segwit'){\n            qrcode = <QRCode value={HDSegwit.pubAddress} size={128}/>\n            detail = <div>\n                <div className=\"detail\">\n                    <div className={\"row\"} >\n                        <div className={'title'}>Address</div>\n                        <CopyToClipboard text={HDSegwit.pubAddress}>\n                            <div className={\"bitcoin-address\"} onClick={()=> {\n                                    let el = document.getElementById('pop-message');\n                                    el.style.WebkitTransition = 'opacity 0s'\n                                    el.style.transition = 'opacity 0s'\n                                    el.style.opacity = '1';\n                                    setTimeout(()=>{\n                                        el.style.WebkitTransition = 'opacity .5s'\n                                        el.style.transition = 'opacity .5s'\n                                        el.style.opacity = '0';\n                                    },100)\n                                }\n                            }>\n                                <span className={'copy-to-clipboard tooltip'}>\n                                        {HDSegwit.pubAddress}\n                                    {/*<span className=\"tooltiptext\">Click to copy!</span>*/}\n                                    <span id=\"pop-message\">Copied!</span>\n                                </span>\n                                <ContentCopySVGIcon />\n                            </div>\n                        </CopyToClipboard>\n                    </div>\n                    <div className={\"row\"}>\n                        <div className={'title'}>Wallet Format</div>\n                        <div>HD Native Segwit</div>\n                    </div>\n                    <div className={\"row\"}>\n                        <div className={'title'}>Mnemonic Seed</div>\n                        <div className={'mnemonic'}>{mnemonic}</div>\n                    </div>\n                    <div className={\"row\"}>\n                        <div className={'title'}>Path</div>\n                        <div>{path}</div>\n                    </div>\n                </div>\n                <div className={\"row\"}>\n                    <div className={\"disclaimer\"}>\n                        Do not share your Mnemonic Seed! <br />\n                        Make a backup!\n                    </div>\n                </div>\n            </div>\n        }\n        if(this.state.form === 'multi-sig'){\n            qrcode = <QRCode value={multiSigAddress} size={128}/>\n            detail = <div>\n                <div className=\"detail\">\n                    <div className={\"row\"} >\n                        <div className={'title'}>Address</div>\n                        <CopyToClipboard text={multiSigAddress} >\n                            <div className={\"bitcoin-address\"}>\n                                <span className={'copy-to-clipboard tooltip'}>\n                                        {multiSigAddress}\n                                    <span className=\"tooltiptext\">Click to copy!</span>\n                                </span>\n                                <ContentCopySVGIcon />\n                            </div>\n                        </CopyToClipboard>\n                    </div>\n                    <div className={\"row\"}>\n                        <div className={'title'}>Wallet Format</div>\n                        <div>{n}-of-{pubkeys.length} MultiSig P2SH</div>\n                    </div>\n                    <div className={\"row\"}>\n                        <div className={'title'}>Associated Public Keys</div>\n                        <div className={'public-keys'}>{pubkeys.map( (el, index) => {return <div>{index + 1}. {el}</div>} )}</div>\n                    </div>\n                </div>\n                <div className={\"row\"}>\n                    <div className={\"disclaimer\"}>\n                        Make a backup!\n                    </div>\n                </div>\n            </div>\n        }\n        \n        return <div>\n            <div className={`address-info ${this.state.form}`}>\n                <div className=\"qr-code-container\">\n                    Address QR Code <br /><br />\n                    {qrcode}\n                </div>\n                <div className=\"detail-container\">\n                    {detail}\n                </div>\n            </div>\n            <Button id=\"outlined-button-1\" className=\"btn-print\" theme=\"primary\" themeType=\"outline\" onClick={() => window.print()}>\n                Print YOUR WALLET\n            </Button>\n        </div>\n    }\n}\n\nexport default AddressInfo;","import React from 'react';\nimport FormHDSegwit from './js/components/FormHDSegwit';\nimport FormMultiSig from './js/components/FormMultiSig';\nimport AddressInfo from './js/components/AddressInfo';\nimport {getRootFromMnemonic, getHDSegwitFromRootWithPath, getPriKeyFromRoot, getMultiSigAddress} from './js/utils/utils';\nimport {Switch} from 'react-md';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      info: {\n        mnemonic: '',\n        masterPriKey: '',\n        path: \"m/84'/0'/0'/0/0\",\n        HDSegwit: '',\n        pubkeys: [],\n        n: 1,\n        multiSigAddress: '',\n      },\n      view: 'form',\n      form: 'hd-segwit'\n    };\n    this.handleFormData = this.handleFormData.bind(this)\n    this.changeView = this.changeView.bind(this)\n    this.changeForm = this.changeForm.bind(this)\n  }\n\n  handleFormData(_formData){\n\n    if(this.state.form === 'hd-segwit'){\n      this.setState({\n        info: { \n          ...this.state.info, \n          path: _formData.path,\n          mnemonic: _formData.seed,\n        }\n      }, async () => {\n        const root = await getRootFromMnemonic(this.state.info.mnemonic)\n        const HDSegwit = await getHDSegwitFromRootWithPath(root, this.state.info.path)\n        this.setState({\n          info: { \n            ...this.state.info, \n            masterPriKey: await getPriKeyFromRoot(root),\n            HDSegwit: HDSegwit,\n          }\n        })\n        this.changeView('result')\n      });\n    }\n\n    if(this.state.form === 'multi-sig'){\n        this.setState({\n          info: {\n            ...this.state.info,\n            pubkeys: _formData.pubkeys,\n            n: _formData.n,\n          }\n        }, async () => {\n          try{\n            let result = await getMultiSigAddress(_formData.pubkeys, _formData.n)\n\n            this.setState({\n              info: {\n                ...this.state.info,\n                multiSigAddress: result,\n              }\n            })\n          }catch (e) {\n            console.log(e)\n          }\n\n          this.changeView('result')\n        })\n      }\n  }\n\n  changeView(_view){\n    this.setState({\n      view: _view\n    })\n  }\n\n  // Toggle form\n  changeForm(){\n    let _form = this.state.form === 'hd-segwit' ? 'multi-sig' : 'hd-segwit'\n    this.setState({\n      form: _form\n    })\n  }\n\n  render() {\n    let view\n\n    if (this.state.view === 'form') {\n      if (this.state.form === 'hd-segwit') {\n        view = <FormHDSegwit handleFormData={this.handleFormData} />\n      }\n      if (this.state.form === 'multi-sig') {\n        view = <FormMultiSig handleFormData={this.handleFormData} />\n      }\n    }\n    if (this.state.view === 'result') {\n        view = <AddressInfo info={this.state.info} form={this.state.form}/>\n    }\n\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <a onClick={() => this.changeView('form')}> \n              <img src={`./images/bitcoin.png`} className=\"App-logo\" alt=\"logo\" />\n            </a>\n\n          </header>\n          <div id={'view-container'}>\n            {(this.state.view === 'form') ?\n              <div className=\"switch\">\n                <div>HD Segwit Wallet</div>\n                <div>\n                  <Switch id=\"switch-1\" name=\"switch\" label=\"MultiSig Wallet\" onChange={() => this.changeForm()} defaultChecked={ (this.state.form === 'multi-sig') ? true : false}/>\n                </div>\n              </div>\n            : \"\"}\n            {view}\n          </div>\n          <a className=\"github-icon\" href=\"https://github.com/mattopolitan/bitcoin-address-generator\" data-hotkey=\"g d\" aria-label=\"Homepage \"\n             data-ga-click=\"Header, go to dashboard, icon:logo\">\n            <svg className=\"octicon octicon-mark-github v-align-middle\" height=\"32\" viewBox=\"0 0 16 16\" version=\"1.1\"\n                 width=\"32\" aria-hidden=\"true\">\n              <path fill-rule=\"evenodd\"\n                    d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path>\n            </svg>\n          </a>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport './sass/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as bip39 from \"bip39\";\nimport * as hdkey from \"hdkey\";\nimport * as bitcoin from \"bitcoinjs-lib\";\n\nexport async function getRootFromMnemonic(_mnemonic){\n    const seed = await bip39.mnemonicToSeed(_mnemonic)\n    const root = hdkey.fromMasterSeed(seed)\n\n    return root\n}\n\nexport function getPriKeyFromRoot(_root){\n    return _root.privateKey.toString('hex')\n}\n\nexport function getHDSegwitFromRootWithPath(_root, _path){\n    const addrnode = _root.derive(_path)\n    const publicKey = addrnode._publicKey\n\n    return {\n        pubKey: publicKey.toString('hex'),\n        pubAddress: bitcoin.payments.p2wpkh({ pubkey: publicKey }).address\n    }\n}\n\nexport function getMultiSigAddress(_pubkeys, _n){\n    let pubkeys = _pubkeys.map(hex => Buffer.from(hex, 'hex'));\n    return bitcoin.payments.p2sh({\n        redeem: bitcoin.payments.p2ms({ m: parseInt(_n), pubkeys }),\n    }).address;\n}"],"sourceRoot":""}