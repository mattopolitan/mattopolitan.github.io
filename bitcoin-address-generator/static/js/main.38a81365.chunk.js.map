{"version":3,"sources":["App.js","js/components/AddressInfo.js","js/components/FormHDSegwit.js","js/validators/rules/seed_validate.js","js/validators/rules/path_validate.js","js/components/FormMultiSig.js","js/validators/rules/pubkey_validate.js","serviceWorker.js","index.js"],"names":["getRootFromMnemonic","_mnemonic","a","bip39","seed","root","hdkey","getHDSegwitFromRootWithPath","_root","_path","publicKey","derive","_publicKey","pubKey","toString","pubAddress","bitcoin","p2wpkh","pubkey","address","App","props","state","info","mnemonic","masterPriKey","path","HDSegwit","pubkeys","n","multiSigAddress","view","form","handleFormData","bind","changeView","changeForm","_formData","this","setState","privateKey","map","hex","Buffer","from","result","p2sh","redeem","p2ms","m","parseInt","e","console","log","_view","_form","className","onClick","src","alt","id","name","label","onChange","defaultChecked","React","Component","AddressInfo","qrcode","detail","value","size","text","class","length","el","index","theme","themeType","window","print","ReeValidate","Validator","extend","validate","compare","validationType","seed_validate","params","message","match","path_validate","FormHDSegwit","validator","formData","errors","generateRandomSeed","validateAndSubmit","_errors","items","target","remove","then","preventDefault","validateAll","submit","disabled","onSubmit","Button","type","DoneSVGIcon","TextArea","lineDirection","rows","placeholder","required","error","has","FormMessage","NUMBER_ITEMS","i","pubkey_validate","FormMultiSig","handleUpdateN","handleUpdatePubkeys","_n","_pubkeys","Select","options","slice","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.38a81365.chunk.js","sourcesContent":["import React from 'react';\nimport FormHDSegwit from './js/components/FormHDSegwit';\nimport FormMultiSig from './js/components/FormMultiSig';\nimport AddressInfo from './js/components/AddressInfo';\nimport * as bitcoin from 'bitcoinjs-lib';\nimport * as bip39 from 'bip39';\nimport * as hdkey from 'hdkey';\nimport * as createHash from 'create-hash';\nimport * as bs58check from 'bs58check';\nimport {Switch} from 'react-md';\n\nasync function getRootFromMnemonic(_mnemonic){\n  const seed = await bip39.mnemonicToSeed(_mnemonic)\n  const root = hdkey.fromMasterSeed(seed)\n\n  return root;\n}\n\nfunction getPriKeyFromRoot(_root){\n  return _root.privateKey.toString('hex')\n}\n\nfunction getHDSegwitFromRootWithPath(_root, _path){\n  const addrnode = _root.derive(_path);\n  const publicKey = addrnode._publicKey;\n\n  return {\n    pubKey: publicKey.toString('hex'),\n    pubAddress: bitcoin.payments.p2wpkh({ pubkey: publicKey }).address\n  }\n\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      info: {\n        mnemonic: '',\n        masterPriKey: '',\n        path: \"m/84'/0'/0'/0/0\",\n        HDSegwit: '',\n        pubkeys: [],\n        n: 1,\n        multiSigAddress: '',\n      },\n      view: 'form',\n      form: 'hd-segwit'\n    };\n    this.handleFormData = this.handleFormData.bind(this)\n    this.changeView = this.changeView.bind(this)\n    this.changeForm = this.changeForm.bind(this)\n  }\n\n  handleFormData(_formData){\n\n    if(this.state.form === 'hd-segwit'){\n      this.setState({\n        info: { \n          ...this.state.info, \n          path: _formData.path,\n          mnemonic: _formData.seed,\n        }\n      }, async () => {\n        const root = await getRootFromMnemonic(this.state.info.mnemonic)\n        const HDSegwit = await getHDSegwitFromRootWithPath(root, this.state.info.path)\n        this.setState({\n          info: { \n            ...this.state.info, \n            masterPriKey: await getPriKeyFromRoot(root),\n            HDSegwit: HDSegwit,\n          }\n        })\n        this.changeView('result')\n      });\n    }\n\n    if(this.state.form === 'multi-sig'){\n      const pubkeys = _formData.pubkeys.map(hex => Buffer.from(hex, 'hex'));\n      this.setState({\n        info: { \n          ...this.state.info, \n          pubkeys: _formData.pubkeys,\n          n: _formData.n\n        }\n      }, () => {\n        try{\n          let result = bitcoin.payments.p2sh({\n            redeem: bitcoin.payments.p2ms({ m: parseInt(this.state.info.n), pubkeys }),\n          }).address;\n  \n          this.setState({\n            info: { \n              ...this.state.info, \n              multiSigAddress: result,\n            }\n          })\n        }catch (e) {\n          console.log(e)\n        }\n\n        this.changeView('result')\n      });\n    }\n  }\n\n  changeView(_view){\n    this.setState({\n      view: _view\n    })\n  }\n\n  // Toggle form\n  changeForm(){\n    let _form = this.state.form === 'hd-segwit' ? 'multi-sig' : 'hd-segwit'\n    this.setState({\n      form: _form\n    })\n  }\n\n  render() {\n    let view\n\n    if (this.state.view === 'form') {\n      if (this.state.form === 'hd-segwit') {\n        view = <FormHDSegwit handleFormData={this.handleFormData} />\n      }\n      if (this.state.form === 'multi-sig') {\n        view = <FormMultiSig handleFormData={this.handleFormData} />\n      }\n    }\n    if (this.state.view === 'result') {\n        view = <AddressInfo info={this.state.info} form={this.state.form}/>\n    }\n\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <a onClick={() => this.changeView('form')}> \n              <img src={`./images/bitcoin.png`} className=\"App-logo\" alt=\"logo\" />\n            </a>\n          </header>\n          <div id={'view-container'}>\n            {(this.state.view === 'form') ?\n              <div className=\"switch\">\n                <div>HD Segwit Wallet</div>\n                <div>\n                  <Switch id=\"switch-1\" name=\"switch\" label=\"MultiSig Wallet\" onChange={() => this.changeForm()} defaultChecked={ (this.state.form === 'multi-sig') ? true : false}/>\n                </div>\n              </div>\n            : \"\"}\n            {view}\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport {Button, Switch, ContentCopySVGIcon} from 'react-md';\nimport QRCode from 'qrcode.react';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nclass AddressInfo extends React.Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            info: this.props.info,\n            form: this.props.form\n        }\n    }\n\n    render() {\n        const {path, mnemonic, HDSegwit, multiSigAddress, n, pubkeys} = this.state.info\n        let qrcode, detail\n\n        if(this.state.form === 'hd-segwit'){\n            qrcode = <QRCode value={HDSegwit.pubAddress} size={128}/>\n            detail = <div>\n                <div className=\"detail\">\n                    <div className={\"row\"} >\n                        <div className={'title'}>Address</div>\n                        <CopyToClipboard text={HDSegwit.pubAddress} >\n                            <div className={\"bitcoin-address\"}>\n                                <span className={'copy-to-clipboard tooltip'}>\n                                        {HDSegwit.pubAddress}\n                                    <span class=\"tooltiptext\">Click to copy!</span>\n                                </span>\n                                <ContentCopySVGIcon />\n                            </div>\n                        </CopyToClipboard>\n                    </div>\n                    <div className={\"row\"}>\n                        <div className={'title'}>Wallet Format</div>\n                        <div>HD Native Segwit</div>\n                    </div>\n                    <div className={\"row\"}>\n                        <div className={'title'}>Seed Mnemonic</div>\n                        <div className={'mnemonic'}>{mnemonic}</div>\n                    </div>\n                    <div className={\"row\"}>\n                        <div className={'title'}>Path</div>\n                        <div>{path}</div>\n                    </div>\n                </div>\n                <div className={\"row\"}>\n                    <div className={\"disclaimer\"}>\n                        Do not share your Seed Mnemonic! <br />\n                        Make a backup!\n                    </div>\n                </div>\n            </div>\n        }\n        if(this.state.form === 'multi-sig'){\n            qrcode = <QRCode value={multiSigAddress} size={128}/>\n            detail = <div>\n                <div className=\"detail\">\n                    <div className={\"row\"} >\n                        <div className={'title'}>Address</div>\n                        <CopyToClipboard text={multiSigAddress} >\n                            <div className={\"bitcoin-address\"}>\n                                <span className={'copy-to-clipboard tooltip'}>\n                                        {multiSigAddress}\n                                    <span class=\"tooltiptext\">Click to copy!</span>\n                                </span>\n                                <ContentCopySVGIcon />\n                            </div>\n                        </CopyToClipboard>\n                    </div>\n                    <div className={\"row\"}>\n                        <div className={'title'}>Wallet Format</div>\n                        <div>{n}-of-{pubkeys.length} MultiSig P2SH</div>\n                    </div>\n                    <div className={\"row\"}>\n                        <div className={'title'}>Associated Public Keys</div>\n                        <div className={'public-keys'}>{pubkeys.map( (el, index) => {return <div>{index + 1}. {el}</div>} )}</div>\n                    </div>\n                </div>\n                <div className={\"row\"}>\n                    <div className={\"disclaimer\"}>\n                        Make a backup!\n                    </div>\n                </div>\n            </div>\n        }\n        \n        return <div>\n            <div className={`address-info ${this.state.form}`}>\n                <div className=\"qr-code-container\">\n                    Address QR Code <br /><br />\n                    {qrcode}\n                </div>\n                <div className=\"detail-container\">\n                    {detail}\n                </div>\n            </div>\n            <Button id=\"outlined-button-1\" className=\"btn-print\" theme=\"primary\" themeType=\"outline\" onClick={() => window.print()}>\n                Print YOUR WALLET\n            </Button>\n        </div>\n    }\n}\n\nexport default AddressInfo;","import React from 'react';\nimport { FormMessage, TextArea, Button, DoneSVGIcon } from 'react-md';\nimport ReeValidate from 'ree-validate'\nimport seed_validate from \"../validators/rules/seed_validate\";\nimport path_validate from \"../validators/rules/path_validate\";\nimport * as bip39 from 'bip39';\n\nReeValidate.Validator.extend('seed_validate', {\n    validate: (value, { compare }) => {\n        return seed_validate({value, compare, validationType: ''});\n    },\n    params: ['compare'],\n    message: ''\n});\n\nReeValidate.Validator.extend('path_validate', {\n    validate: (value, { compare }) => {\n        return path_validate({value, compare, validationType: ''});\n    },\n    params: ['compare'],\n    message: ''\n});\n\nclass FormHDSegwit extends React.Component{\n    constructor(props) {\n        super(props)\n\n        this.validator = new ReeValidate.Validator({\n            seed: 'required|seed_validate',\n            path: 'required|path_validate',\n        })\n\n        this.state = {\n            formData: {\n                seed: '',\n                path: '',\n            },\n            errors: this.validator.errors,\n        }\n\n        this.generateRandomSeed = this.generateRandomSeed.bind(this)\n        this.onChange = this.onChange.bind(this)\n        this.validateAndSubmit = this.validateAndSubmit.bind(this)\n    }\n\n    generateRandomSeed(){\n        const _formData = {\n            seed: bip39.generateMnemonic(256),\n            path: \"m/84'/0'/0'/0/0\"\n        }\n        const _errors = this.validator.errors\n\n        _errors.items = []\n        this.setState({\n            formData: _formData,\n            errors: _errors\n        })\n    }\n\n    onChange(e) {\n        const name = e.target.name\n        const value = e.target.value\n        const { errors } = this.validator\n\n        // reset errors for url field\n        errors.remove(name)\n\n        // update form data\n        this.setState({ formData: { ...this.state.formData, [name]: value } })\n\n        this.validator.validate(name, value)\n            .then(() => {\n                this.setState({ errors }, console.log(errors))\n            })\n            \n    }\n\n    async validateAndSubmit(e) {\n        e.preventDefault()\n\n        const { formData } = this.state\n        const { errors } = this.validator\n\n        const valid = this.validator.validateAll(formData)\n\n        if (valid) {\n            this.submit(formData)\n        } else {\n            this.setState({ errors })\n        }\n    }\n\n    submit(formData) {\n        if(this.state.errors.items.length === 0)\n            this.props.handleFormData(formData)\n    }\n\n    render() {\n        const { errors } = this.state\n        const disabled = errors.items.length !== 0 || this.state.formData.path === '' || this.state.formData.seed === ''\n\n        return (<form id=\"form-hd-segwit\" className={'form'} onSubmit={this.validateAndSubmit}>\n            <div className=\"row\">\n                <div className=\"col-xs-4\">\n                    <Button id=\"outlined-button-1\" theme=\"primary\" themeType=\"outline\" onClick={() => this.generateRandomSeed()}>\n                        Generate randomly\n                    </Button>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-xs-4\">\n                    <Button id=\"outlined-button-1\" theme=\"primary\" themeType=\"contained\" type=\"submit\" disabled={disabled}>\n                        {disabled ? '' : <DoneSVGIcon />}\n                        Generate your <br className={'mobile-visible'} />Bitcoin Address!\n                    </Button>\n                </div>\n            </div>\n            <div className={\"row\"}>\n                <div className=\"md-grid\">\n                    <TextArea\n                        id=\"seed\"\n                        label=\"Seed Mnemonic\"\n                        type=\"seed\"\n                        lineDirection=\"center\"\n                        className=\"md-cell md-cell--bottom form-control\"\n                        rows={6}\n                        value={this.state.formData.seed}\n                        name=\"seed\"\n                        placeholder=\"Enter your Seed Mnemonic\"\n                        required\n                        error={errors.has('seed')}\n                        onChange={this.onChange}\n                    />\n                    <FormMessage id={`seed-field-error-message`} error>\n                    {\n                        errors.has('seed') ?\n                                \"Invalid Seed Mnemonic!\"\n                            : \"\"\n                    }\n                    </FormMessage>\n\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"md-grid\">\n                    <TextArea\n                        id=\"path\"\n                        label=\"Path\"\n                        type=\"path\"\n                        lineDirection=\"center\"\n                        className=\"md-cell md-cell--bottom form-control\"\n                        rows={3}\n                        name=\"path\"\n                        placeholder=\"m / purpose' / coin_type' / account' / change / address_index\"\n                        required\n                        error={errors.has('path')}\n                        value={this.state.formData.path}\n                        onChange={this.onChange}\n                    />\n                    <FormMessage id={`seed-field-error-message`} error>\n                    {\n                        errors.has('path') ?\n                                \"Invalid Path!\"\n                            : \"\"\n                    }\n                    </FormMessage>\n\n                </div>\n            </div>\n\n\n        </form>)\n    }\n}\n\nexport default FormHDSegwit;","import * as bip39 from 'bip39';\n\nexport default ({ value, compare, validationType }) => {\n    return bip39.validateMnemonic(value)\n}\n","export default ({ value, compare, validationType }) => {\n    if (typeof value === 'undefined') return true\n    return (value.match(/^([mM]{1}\\/84'\\/0'\\/)[0-9]{1}'\\/(0|1)\\/([0-9]{1}|[1-9][0-9]{1,5})$/i)) ? true : false\n}","import React from 'react';\nimport {FormMessage, Select, Button, DoneSVGIcon} from 'react-md';\nimport ReeValidate from 'ree-validate'\nimport pubkey_validate from \"../validators/rules/pubkey_validate\";\n\nimport ChipInput from 'material-ui-chip-input';\n\nlet NUMBER_ITEMS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\nReeValidate.Validator.extend('pubkey_validate', {\n    validate: (value, { compare }) => {\n        return pubkey_validate({value, compare, validationType: ''});\n    },\n    params: ['compare'],\n    message: ''\n});\n\nclass FormMultiSig extends React.Component{\n    constructor(props) {\n        super(props)\n\n        this.validator = new ReeValidate.Validator({\n            pubkeys: 'required|pubkey_validate',\n            n: 'required|integer',\n        })\n\n        this.state = {\n            formData: {\n                pubkeys: [],\n                n: 0,\n            },\n            errors: this.validator.errors,\n        }\n\n        this.handleUpdateN = this.handleUpdateN.bind(this)\n        this.handleUpdatePubkeys = this.handleUpdatePubkeys.bind(this)\n        this.validateAndSubmit = this.validateAndSubmit.bind(this)\n    }\n\n    handleUpdateN(_n){\n        const { errors } = this.validator\n\n        errors.remove('n')\n\n        this.setState({ formData: { ...this.state.formData, ['n']: _n } })\n\n        this.validator.validate('n', _n)\n            .then(() => {\n                this.setState({ errors })\n            })\n    }\n\n    handleUpdatePubkeys(_pubkeys){\n        const { errors } = this.validator\n\n        errors.remove('pubkeys')\n\n        this.setState({ formData: { ...this.state.formData, ['pubkeys']: _pubkeys } })\n\n        this.validator.validate('pubkeys', _pubkeys)\n            .then(() => {\n                this.setState({ errors })\n            })\n\n    }\n\n    async validateAndSubmit(e) {\n        e.preventDefault()\n\n        const { formData } = this.state\n        const { errors } = this.validator\n\n        const valid = this.validator.validateAll(formData)\n\n        if (valid) {\n            this.submit(formData)\n        } else {\n            this.setState({ errors }, console.log(errors))\n        }\n    }\n\n    submit(formData) {\n        if(this.state.errors.items.length === 0)\n            this.props.handleFormData(formData)\n    }\n\n    render() {\n        const { errors } = this.state\n        const disabled = errors.items.length !== 0 || this.state.formData.pubkeys.length === 0 || this.state.formData.n === 0\n\n        return (<form id=\"form-multisig\" className={'form'} onSubmit={this.validateAndSubmit}>\n            <div className=\"row\">\n                <div className=\"col-xs-4\">\n                    <div className=\"col-xs-4\">\n                        <Button id=\"outlined-button-1\" theme=\"primary\" themeType=\"contained\" type=\"submit\" disabled={disabled}>\n                            {disabled ? '' : <DoneSVGIcon />}\n                            Generate your <br className={'mobile-visible'} /> Bitcoin Address!\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            <div className={\"row\"}>\n                Type your Public Keys and press Enter<br />\n                (Support up to 15 keys)<br /><br />\n                <ChipInput\n                    name={'pubkeys'}\n                    onChange={(pubkeys) => this.handleUpdatePubkeys(pubkeys)}\n                    type=\"pubkeys\"\n                />\n                <FormMessage id={`pubkeys-field-error-message`} error>\n                    {\n                        errors.has('pubkeys') ?\n                            \"Invalid Public Key exists! Make sure it's a 33 byte compressed Public Key!\"\n                        : \"\"\n                    }\n                </FormMessage>\n            </div>\n            <div className=\"row\">\n                <Select\n                    id=\"custom-select-1\"\n                    name=\"n\"\n                    options={NUMBER_ITEMS.slice(0,this.state.formData.pubkeys.length)}\n                    onChange={(n) => this.handleUpdateN(n)}\n                    label={`n-of-${this.state.formData.pubkeys.length}`}\n                    value={this.state.formData.n}\n                    type=\"n\"\n                    required\n                    error={errors.has('n')}\n                    disabled={this.state.formData.pubkeys.length === 0}\n                />\n            </div>\n\n        </form>)\n    }\n}\n\nexport default FormMultiSig;","\nexport default ({ value, compare, validationType }) => {\n    if (typeof value === 'undefined') return true\n    if (value.length > 15) return false\n    for(let i = 0; i < value.length; i++){\n        if(!value[i].match(/[a-f0-9]{66}$/i))\n            return false\n    }\n    return true\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport './sass/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}